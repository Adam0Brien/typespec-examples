import { DecoratorContext, EmitContext, EmitOptionsFor, Interface, Program, Type } from "@typespec/compiler";
import { FieldDecorator, MessageDecorator, PackageDecorator, ReserveDecorator, StreamDecorator } from "../generated-defs/TypeSpec.Protobuf.js";
import { ExternRefDecorator } from "../generated-defs/TypeSpec.Protobuf.Private.js";
import { TypeSpecProtobufLibrary } from "./lib.js";
/**
 * Defined in the [ProtoBuf Language Spec](https://developers.google.com/protocol-buffers/docs/reference/proto3-spec#identifiers).
 *
 * ident = letter \{ letter | decimalDigit | "_" \}
 * fullIdent = ident \{ "." ident \}
 */
export declare const PROTO_FULL_IDENT: RegExp;
/**
 * Decorate an interface as a service, indicating that it represents a Protobuf `service` declaration.
 *
 * @param ctx - decorator context
 * @param target - the decorated interface
 */
export declare function $service(ctx: DecoratorContext, target: Interface): void;
export interface PackageDetails {
    name?: string;
}
/**
 * Declare a Protobuf package.
 *
 * @param ctx - decorator context
 * @param target - target decorator namespace
 */
export declare const $package: PackageDecorator;
/**
 * Determines whether a type represents a Protobuf map.
 *
 * @param program - the program context
 * @param m - the type to test
 * @returns true if the internal representation of a Protobuf map is bound to this type.
 */
export declare function isMap(program: Program, m: Type): boolean;
export declare const $externRef: ExternRefDecorator;
export declare const $stream: StreamDecorator;
export type Reservation = string | number | ([number, number] & {
    type: Type;
});
export declare const $reserve: ReserveDecorator;
export declare const $message: MessageDecorator;
/**
 * Decorate a model property with a field index. Field indices are required for all fields of emitted messages.
 *
 * @param param0
 * @param target
 * @param fieldIndex
 * @returns
 */
export declare const $field: FieldDecorator;
/**
 * Emitter main function.
 *
 * @param program - the program to emit
 */
export declare function $onEmit(ctx: EmitContext<EmitOptionsFor<TypeSpecProtobufLibrary>>): Promise<void>;
/**
 * Validation function
 */
export declare function $onValidate(program: Program): Promise<void>;
export declare const namespace = "TypeSpec.Protobuf";
//# sourceMappingURL=proto.d.ts.map