// Generated by Microsoft TypeSpec

syntax = "proto3";

package kiosk;

import "google/type/latlng.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message ScreenSize {
  int32 width = 1;
  int32 height = 2;
}

message Kiosk {
  int32 id = 1;
  string name = 2;
  ScreenSize size = 3;
  google.type.LatLng location = 4;
  google.protobuf.Timestamp create_time = 5;
}

message Sign {
  int32 id = 1;
  string name = 2;
  string text = 3;
  bytes image = 4;
  google.protobuf.Timestamp create_time = 5;
}

message GetSignIdResponse {
  int32 sign_id = 1;
}

message ListKiosksResponse {
  repeated Kiosk kiosks = 1;
}

message GetKioskRequest {
  int32 id = 1;
}

message DeleteKioskRequest {
  int32 id = 1;
}

message ListSignsResponse {
  repeated Sign signs = 1;
}

message GetSignRequest {
  int32 id = 1;
}

message DeleteSignRequest {
  int32 id = 1;
}

message SetSignIdForKioskIdsRequest {
  repeated int32 kiosk_ids = 1;
  int32 sign_id = 2;
}

message GetSignIdForKioskIdRequest {
  int32 kiosk_id = 1;
}

message GetSignIdsforKioskIdRequest {
  int32 kiosk_id = 1;
}

service Display {
  // Create a new kiosk. This enrolls the kiosk for sign display.
  rpc CreateKiosk(Kiosk) returns (Kiosk);
  // List active kiosks.
  rpc ListKiosks(google.protobuf.Empty) returns (ListKiosksResponse);
  // Get a kiosk.
  rpc GetKiosk(GetKioskRequest) returns (Kiosk);
  // Delete a kiosk.
  rpc DeleteKiosk(DeleteKioskRequest) returns (google.protobuf.Empty);
  // Create a new sign.
  rpc CreateSign(Sign) returns (Sign);
  // List active signs.
  rpc ListSigns(google.protobuf.Empty) returns (ListSignsResponse);
  // Get a sign.
  rpc GetSign(GetSignRequest) returns (Sign);
  // Delete a sign.
  rpc DeleteSign(DeleteSignRequest) returns (google.protobuf.Empty);
  // Set a sign for display on one or more kiosks
  rpc SetSignIdForKioskIds(SetSignIdForKioskIdsRequest) returns (google.protobuf.Empty);
  // Get the sign that should be displayed on a kiosk.
  rpc GetSignIdForKioskId(GetSignIdForKioskIdRequest) returns (GetSignIdResponse);
  // Get signs that should be displayed on a kiosk. Streams.
  rpc GetSignIdsforKioskId(GetSignIdsforKioskIdRequest) returns (stream GetSignIdResponse);
}
